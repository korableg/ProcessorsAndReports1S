&НаКлиенте
Перем ОбработкаПеретаскивание;

&НаСервереБезКонтекста
Функция ЭтоПериодическийОбъект(Знач ОбъектПоиска)
	Если ТипЗнч(ОбъектПоиска) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если ОбъектПоиска.Тип = "Документ" ИЛИ ОбъектПоиска.Тип = "БизнесПроцесс" Тогда
		Возврат Истина;
	ИначеЕсли ОбъектПоиска.Тип = "РегистрСведений" Тогда 
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектПоиска.ПолноеИмя);
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Возврат Истина;
		КонецЕсли; 
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектПоиска.ПолноеИмя);
		Если ОбъектМетаданных.Реквизиты.Найти("Дата") <> Неопределено Тогда
			Если ОбъектМетаданных.Реквизиты.Дата.Тип.Типы().Количество() = 1
				И ОбъектМетаданных.Реквизиты.Дата.Тип.Типы()[0] = Тип("Дата") Тогда
				Возврат Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	Возврат Ложь
КонецФункции // ()

&НаСервере
Функция СформироватьСтруктуруПараметров()
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Настройка",  Неопределено);
	СтруктураПараметров.Вставить("Настройки",  Новый Массив);
	СтруктураПараметров.Вставить("ОбъектПоиска",  ОбъектПоиска);
	СтруктураПараметров.Вставить("ОбрабатыватьВТранзакции", ОбрабатыватьВТранзакции);
	СтруктураПараметров.Вставить("КоличествоОбъектовНаТранзакцию", КоличествоОбъектовНаТранзакцию);
	СтруктураПараметров.Вставить("РежимРаботы", РежимРаботы);
	Если ОбъектПоиска.Тип = "ПланОбмена" ИЛИ ОбъектПоиска.Тип = "РегистрСведений" Тогда
		СтруктураПараметров.Вставить("ИспользоватьРежимЗагрузкиОбменаДанными", Ложь);
	Иначе
		СтруктураПараметров.Вставить("ИспользоватьРежимЗагрузкиОбменаДанными", ИспользоватьРежимЗагрузкиОбменаДанными);
	КонецЕсли; 
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Выбрать", Истина);
	Если ОбъектПоиска.Тип = "РегистрСведений" Тогда
		ТаблицаОбъектов = НайденныеОбъекты.Выгрузить(СтруктураОтбора);
		СтруктураПараметров.Вставить("АдресТаблицы", ПоместитьВоВременноеХранилище(ТаблицаОбъектов, ЭтаФорма.УникальныйИдентификатор));
	Иначе
		ТаблицаОбъектов = НайденныеОбъекты.Выгрузить(СтруктураОтбора, "Объект");
		СтруктураПараметров.Вставить("НайденныеОбъекты", ТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
	КонецЕсли; 
	
	Возврат СтруктураПараметров;
КонецФункции

&НаКлиенте
Функция ПроверитьДоступностьОбработки()
	ИндексСтроки = Элементы.ДоступныеОбработки.ТекущаяСтрока;
	ТекущаяСтрока = ДоступныеОбработки.НайтиПоИдентификатору(ИндексСтроки);
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат ОбработкаДоступна(ОбъектПоиска.Тип, ТекущаяСтрока.ИмяФормы);
	КонецЕсли;
	
	Возврат ОбработкаДоступна(ОбъектПоиска.Тип, Родитель.ИмяФормы);
КонецФункции

&НаСервере
Процедура СоздатьКолонки(ТаблицаРезультата, МассивРеквизитовПоУмолчанию = Неопределено) Экспорт
	
	ТаблицаЭлемент = Элементы.НайденныеОбъекты;
	
	//очистка
	Для Каждого ДобавленныйЭлемент Из ДобавленныеЭлементы Цикл
		Элементы.Удалить(Элементы[ДобавленныйЭлемент.Значение]);
	КонецЦикла;
	ДобавленныеЭлементы.Очистить();
	
	РеквизитыОбъекта = Метаданные.НайтиПоПолномуИмени(ОбъектПоиска.ПолноеИмя).Реквизиты;
		
	//добавляем реквизиты
	МассивРеквизитов = Новый Массив;
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Если МассивРеквизитовПоУмолчанию <> Неопределено 
			И МассивРеквизитовПоУмолчанию.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипКолонки = Колонка.ТипЗначения;
		Если Колонка.Имя = "Представление" ИЛИ ТипКолонки = Тип("ХранилищеЗначения") Тогда
			Продолжить;
		КонецЕсли;
		//СистемныеПоля
		Если Колонка.Имя = "СистемныеПоляНомерПоПорядку"  Тогда
			ЗаголовокПоля = "№ п/п";
		Иначе
			Реквизит = РеквизитыОбъекта.Найти(Колонка.Имя);
			Если Реквизит <> Неопределено Тогда
				//ЗаголовокПоля = ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним + " (" + Реквизит.Имя + ")", Реквизит.Имя);
				ЗаголовокПоля = ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним, Реквизит.Имя);
			Иначе                  
				ЗаголовокПоля = Колонка.Имя;
			КонецЕсли;  //  
		КонецЕсли; 
		
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, ТипКолонки, ТаблицаЭлемент.Имя, ЗаголовокПоля);
		МассивРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов, ДобавленныеРеквизиты.ВыгрузитьЗначения());
	ДобавленныеРеквизиты.Очистить();
	
	//добавляем элементы управления
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		Попытка
			ДобавленныеРеквизиты.Добавить(Реквизит.Путь + "." + Реквизит.Имя);
			
			Элемент = Элементы.Добавить(ТаблицаЭлемент.Имя + Реквизит.Имя, Тип("ПолеФормы"), ТаблицаЭлемент);
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным = ТаблицаЭлемент.Имя + "." + Реквизит.Имя;
			Элемент.ТолькоПросмотр = Истина;
			Элемент.РастягиватьПоГоризонтали = Ложь;
			Если Реквизит.Имя = "СистемныеПоляНомерПоПорядку" Тогда
				Элемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
				Элемент.Ширина = 3;
			КонецЕсли; 
			
			ДобавленныеЭлементы.Добавить(Элемент.Имя);
		Исключение
		КонецПопытки; 
	КонецЦикла;
	
	//заполнение данными
	НайденныеОбъекты.Очистить();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезультата Цикл
		НоваяСтрока = НайденныеОбъекты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает полный путь к форме внешней обработки, отчета или любого объекта метаданных в виде
// ВнешняяОбработка.ИмяВнешнейОбработки.Форма.ИмяФормы
// ВнешнийОтчет.ИмяВнешнегоОтчета.Форма.ИмяФормы
// Документ.ИмяОбъекта.Форма.ИмяФормы
//
// Параметры
//  ИмяФормы  - <Строка> - имя формы объекта
//
// Возвращаемое значение:
//   <Строка>   - полный путь к форме
//
&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; // 
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;
	
КонецФункции

&НаСервере
Процедура СохранитьОбъектПоиска(ПолучитьНастройки = Истина)
	
	Если ПолучитьНастройки Тогда
		ОтборДанных = КомпоновщикНастроек.ПолучитьНастройки();
	КонецЕсли; 
	
	Если ТипЗнч(ОбъектПоиска) <> Тип("Структура") Тогда
		ОбъектПоиска = ЗаполнитьСтруктуруОбъектаПоиска();
	ИначеЕсли ЗначениеЗаполнено(ОбъектПоиска.Тип) Тогда 
		ОбъектыПоиска.Вставить(ОбъектПоиска.Тип + ОбъектПоиска.Имя, ОтборДанных);
		ОбъектыПоиска.Вставить(ОбъектПоиска.Тип + ОбъектПоиска.Имя + "СтрокаПоиска", СтрокаПоиска);
	КонецЕсли; 
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьРезультатОтбора(РезультатОтбора)
	
	ОтборДанных = РезультатОтбора.Настройки;
	СтрокаПоиска = РезультатОтбора.СтрокаПоиска;
	Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(РезультатОтбора.СтрокаПоискаСписок);
	ПараметрыЗапроса.Загрузить(РезультатОтбора.ПараметрыЗапроса.Выгрузить());
	
	ТекстЗапроса = РезультатОтбора.ТекстЗапроса;
	ТекстПроизвольногоЗапроса = РезультатОтбора.ТекстПроизвольногоЗапроса;
	РежимОтбора = РезультатОтбора.РежимОтбора;
	ОбъектПоиска.РежимОтбора = РежимОтбора;
	
	СохранитьОбъектПоиска(Ложь);
	
	ЗаполнитьНастройки(КомпоновщикНастроек, ОтборДанных);
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьСтроку(ТекСтрока)
	НоваяСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
	НоваяСтрока.Обработка = ТекСтрока.Обработка;
	
	Настройка = Новый Структура;
	Настройка.Вставить("Обработка", ТекСтрока.Обработка);
	Настройка.Вставить("Прочее", Неопределено);
	
	НоваяСтрока.Настройка.Добавить(Настройка);
	
	Элементы.ДоступныеОбработки.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.ДоступныеОбработки.ИзменитьСтроку();
	
	Возврат НоваяСтрока;
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкуПоУмолчанию()
	
	Перем Настройка;
	Настройка = Новый Структура;
	Настройка.Вставить("Обработка", "Новая настройка");
	Настройка.Вставить("Прочее", Новый Структура);
	Настройка.Прочее.Вставить("РежимРаботы", РежимРаботы);
	Если ОбъектПоиска.Тип = "ПланОбмена" ИЛИ ОбъектПоиска.Тип = "РегистрСведений" Тогда
		Настройка.Прочее.Вставить("ИспользоватьРежимЗагрузкиОбменаДанными", Ложь);
	Иначе
		Настройка.Прочее.Вставить("ИспользоватьРежимЗагрузкиОбменаДанными", ИспользоватьРежимЗагрузкиОбменаДанными);
	КонецЕсли; 
	
	Возврат Настройка;
	
КонецФункции

&НаКлиенте
Функция СформироватьНастройки(ТекСтрока)
	
	МассивНастроек = Новый Массив;
	Для Каждого Стр Из ТекСтрока.ПолучитьЭлементы() Цикл
		Если Стр.Настройка[0].Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНастроек.Добавить(Стр.Настройка[0].Значение);
	КонецЦикла;
	
	Если МассивНастроек.Количество() = 0 Тогда
		МассивНастроек.Добавить(ПолучитьНастройкуПоУмолчанию());
	КонецЕсли; 
	
	Возврат МассивНастроек;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОбработки(ИмяТаблицы, Выбор)
	Таблица = ЭтаФорма[ИмяТаблицы];
	Для Каждого Стр Из Таблица Цикл
		Стр.Выбрать = Выбор;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ОбработкаДоступна(ПроверяемыйТипОбъекта = "", ИмяОбработки)

	Если ПустаяСтрока(ПроверяемыйТипОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;

	Попытка
		ТипыОбрабатываемыхОбъектов = ПолучитьФорму(ПолучитьПолноеИмяФормы(ИмяОбработки)).мТипыОбрабатываемыхОбъектов;
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Если ТипыОбрабатываемыхОбъектов = Неопределено Тогда
    	Возврат Истина;
	Иначе
		Если Найти(ТипыОбрабатываемыхОбъектов, ПроверяемыйТипОбъекта) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура УстановитьКартинкиОбработок()
	Для Каждого Стр Из ДоступныеОбработки.ПолучитьЭлементы() Цикл
		Стр.Картинка = БиблиотекаКартинок.Обработка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭлементы(Выбор)
	Для Каждого Стр Из НайденныеОбъекты Цикл
		Стр.Выбрать = Выбор;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОбъектаПоиска(ВосстанавливатьНастройки = Истина)
	
	Если ОбъектПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбъектПоиска.Свойство("РежимОтбора") Тогда
		ОбъектПоиска.Вставить("РежимОтбора", 0);
	КонецЕсли; 
	УстановитьВидимостьДоступность();
	
	ТекстЗапроса = ПолучитьТекстЗапроса(ИменаПолейТЧ, ОбъектПоиска);
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли; 
	ТекстПроизвольногоЗапроса = ТекстЗапроса + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ";
	
	Если ОбъектПоиска.Тип = "Документ" ИЛИ ОбъектПоиска.Тип = "БизнесПроцесс" 
		ИЛИ (ОбъектПоиска.Тип <> "РегистрСведений" И ЭтоПериодическийОбъект(ОбъектПоиска)) Тогда
		ТекстЗапроса = ТекстЗапроса + "
				|{ГДЕ ТаблицаСсылок.Дата >= &НачДата}
				|{ГДЕ ТаблицаСсылок.Дата <= &КонДата}";
	ИначеЕсли ОбъектПоиска.Тип = "РегистрСведений" Тогда 
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектПоиска.ПолноеИмя);
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ТекстЗапроса = ТекстЗапроса + "
					|{ГДЕ ТаблицаСсылок.Период >= &НачДата}
					|{ГДЕ ТаблицаСсылок.Период <= &КонДата}";
		КонецЕсли; 
	КонецЕсли;
			
	Если ВосстанавливатьНастройки И ОбъектыПоиска.Свойство(ОбъектПоиска.Тип + ОбъектПоиска.Имя) Тогда
		ОтборДанных = ОбъектыПоиска[ОбъектПоиска.Тип + ОбъектПоиска.Имя];
		Если ОбъектыПоиска.Свойство(ОбъектПоиска.Тип + ОбъектПоиска.Имя + "СтрокаПоиска") Тогда
			СтрокаПоиска = ОбъектыПоиска[ОбъектПоиска.Тип + ОбъектПоиска.Имя + "СтрокаПоиска"];
		КонецЕсли; 
	Иначе
		ОтборДанных = Неопределено;
	КонецЕсли; 
	ПараметрыЗапроса.Очистить();
	
	ЗаполнитьНастройки(КомпоновщикНастроек, ОтборДанных);
	
	Элементы.ДекорацияОбъектПоискаПиктограмма.Картинка = БиблиотекаКартинок[ОбъектПоиска.Тип];
	Элементы.ДекорацияОбъектПоискаПиктограмма.Подсказка = ОбъектПоиска.Тип;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьУсловиеПоискаПоСтроке(СтрокаПоиска, ОбъектПоиска)
	УсловиеПоискаПоСтроке = "";

	ИскомыйОбъект = ОбъектПоиска;
	
	Если ИскомыйОбъект.Тип <> "РегистрСведений" И СтрокаПоиска <> "" Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИскомыйОбъект.ПолноеИмя);
		
		УсловиеПоискаПоСтроке = "";

		СтрокаДляПоиска = СтрЗаменить(СтрокаПоиска, """", """""");

		Если ИскомыйОбъект.Тип = "Справочник" Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Наименование ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;

			Если ОбъектМетаданных.ДлинаКода <> 0 И ОбъектМетаданных.ТипКода = 
				Метаданные.СвойстваОбъектов.ТипКодаСправочника.Строка Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Код ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
		ИначеЕсли ИскомыйОбъект.Тип = "ПланВидовХарактеристик" ИЛИ ИскомыйОбъект.Тип = "ПланВидовРасчета" ИЛИ ИскомыйОбъект.Тип = "ПланОбмена" Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Наименование ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;

			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Код ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
		ИначеЕсли ИскомыйОбъект.Тип = "Документ" ИЛИ ИскомыйОбъект.Тип = "БизнесПроцесс" ИЛИ ИскомыйОбъект.Тип = "Задача" Тогда
			Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Строка И ОбъектМетаданных.ДлинаНомера <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Номер ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
			Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераБизнесПроцесса.Строка И ОбъектМетаданных.ДлинаНомера <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Номер ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
			Если ОбъектМетаданных.ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераЗадачи.Строка И ОбъектМетаданных.ДлинаНомера <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Номер ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
			Если ИскомыйОбъект.Тип = "Задача" И ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " Наименование ПОДОБНО ""%"
				                      + СтрокаДляПоиска + "%""";
			КонецЕсли;
		КонецЕсли;

		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если Реквизит.Тип.Типы().Количество() = 1 И Реквизит.Тип.СодержитТип(Тип("Строка")) 
				И Реквизит.Тип.КвалификаторыСтроки.Длина <> 0 Тогда
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + Реквизит.Имя + " ПОДОБНО ""%"
									  + СтрокаДляПоиска + "%""";
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТЧ Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Для каждого Реквизит Из ТЧ.Реквизиты Цикл
				Если Реквизит.Тип.Типы().Количество() = 1 И Реквизит.Тип.СодержитТип(Тип("Строка")) 
					И Реквизит.Тип.КвалификаторыСтроки.Длина <> 0 Тогда
					Если УсловиеПоискаПоСтроке <> "" Тогда
						УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
					КонецЕсли;
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + ТЧ.Имя + "." + Реквизит.Имя + " ПОДОБНО ""%"
										  + СтрокаДляПоиска + "%""";
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
		
	КонецЕсли;

	Возврат УсловиеПоискаПоСтроке;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапроса(ИменаПолейТЧ, ОбъектПоиска)
    	
	ИскомыйОбъект = ОбъектПоиска;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИскомыйОбъект.ПолноеИмя);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат "";
	КонецЕсли; 
	Условие = "";

	Если ИскомыйОбъект.Тип <> "РегистрСведений" Тогда
		ТекстЗапроса = "ВЫБРАТЬ 
		|	Ссылка КАК Объект, 
		|	//НомерСтроки 
		|	Представление";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ 
		|	""Запись"" КАК Объект,
		|	0 КАК Картинка
		|	//Отображаемые поля
		|";
		Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Период";
		КонецЕсли; 
	КонецЕсли; 
	
	Если ИскомыйОбъект.Тип = "Справочник" Тогда
		Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Наименование КАК Наименование";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеНаименования Тогда
			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
				Условие = "Код";
			КонецЕсли;
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	Ссылка.Код КАК Код";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Условие = "Наименование";
			КонецЕсли;
		КонецЕсли;
		Если ОбъектМетаданных.Иерархический Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	Ссылка.Родитель КАК Родитель";
				Условие = Условие + ", " + Символы.ПС + "Родитель.*";
		КонецЕсли;
		Если ОбъектМетаданных.Владельцы.Количество() > 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	Ссылка.Владелец КАК Владелец";
				Условие = Условие + ", " + Символы.ПС + "Владелец.*";
		КонецЕсли;
	ИначеЕсли ИскомыйОбъект.Тип =  "ПланВидовХарактеристик"  Тогда
		Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Наименование КАК Наименование";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеНаименования Тогда
			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
				Условие = "Код";
			КонецЕсли;
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	Ссылка.Код КАК Код";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Условие = "Наименование";
			КонецЕсли;
		КонецЕсли;
		Если ОбъектМетаданных.Иерархический Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	Ссылка.Родитель КАК Родитель";
		КонецЕсли;
	ИначеЕсли ИскомыйОбъект.Тип =  "ПланВидовРасчета"  Тогда
		Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Наименование КАК Наименование";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаРасчета.ВВидеНаименования Тогда
			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
				Условие = "Код";
			КонецЕсли;
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	Ссылка.Код КАК Код";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаРасчета.ВВидеКода Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Условие = "Наименование";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИскомыйОбъект.Тип =  "ПланОбмена"  Тогда
		Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Наименование КАК Наименование";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеПланаОбмена.ВВидеНаименования Тогда
			Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
				Условие = "Код";
			КонецЕсли;
		КонецЕсли;
		Если ОбъектМетаданных.ДлинаКода <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	Ссылка.Код КАК Код";
		КонецЕсли;
		Если ОбъектМетаданных.ОсновноеПредставление <> Метаданные.СвойстваОбъектов.ОсновноеПредставлениеПланаОбмена.ВВидеКода Тогда
			Если ОбъектМетаданных.ДлинаНаименования <> 0 Тогда
				Условие = "Наименование";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИскомыйОбъект.Тип = "Документ" ИЛИ ИскомыйОбъект.Тип = "БизнесПроцесс" Тогда
		Если ОбъектМетаданных.ДлинаНомера <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Дата КАК Дата,
			|	Ссылка.Номер КАК Номер";
			Условие = "Номер";
		Иначе                  
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Дата КАК Дата";
		КонецЕсли;  //  
	ИначеЕсли ИскомыйОбъект.Тип = "Задача" Тогда
		Если ОбъектМетаданных.ДлинаНомера <> 0 Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Наименование КАК Наименование,
			|	Ссылка.Номер КАК Номер";
			Условие = "Номер, Наименование";
		Иначе                  
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Ссылка.Наименование КАК Наименование";
			Условие = "Наименование";
		КонецЕсли;  //  
	КонецЕсли;
		
	Если ИскомыйОбъект.Тип = "Справочник" ИЛИ ИскомыйОбъект.Тип = "ПланВидовХарактеристик" Тогда
		Если ОбъектМетаданных.Иерархический И ОбъектМетаданных.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР КОГДА Ссылка.ЭтоГруппа ТОГДА 
			|		ВЫБОР КОГДА Ссылка.ПометкаУдаления ТОГДА 3 ИНАЧЕ 0 КОНЕЦ 
			|	ИНАЧЕ 
			|		ВЫБОР КОГДА Ссылка.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ 
			|	КОНЕЦ КАК Картинка";
		Иначе
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР КОГДА Ссылка.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ КАК Картинка";
		КонецЕсли;
	ИначеЕсли ИскомыйОбъект.Тип = "ПланВидовРасчета" ИЛИ ИскомыйОбъект.Тип = "ПланОбмена" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ВЫБОР КОГДА Ссылка.ПометкаУдаления ТОГДА 4 ИНАЧЕ 1 КОНЕЦ  КАК Картинка";
	ИначеЕсли ИскомыйОбъект.Тип = "Документ" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ВЫБОР КОГДА Ссылка.Проведен ТОГДА 
		|		7 
		|	ИНАЧЕ 
		|		ВЫБОР КОГДА Ссылка.ПометкаУдаления ТОГДА 8 ИНАЧЕ 6 КОНЕЦ 
		|	КОНЕЦ КАК Картинка";
	ИначеЕсли ИскомыйОбъект.Тип <> "РегистрСведений" Тогда
		ТекстЗапроса = ТекстЗапроса + ", 
		|	ВЫБОР КОГДА Ссылка.ПометкаУдаления ТОГДА 8 ИНАЧЕ 6 КОНЕЦ  КАК Картинка";
	КонецЕсли;
		
	ТипХранилище = Тип("ХранилищеЗначения");
	Если ИскомыйОбъект.Тип <> "РегистрСведений" Тогда
		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если НЕ Реквизит.Тип.СодержитТип(ТипХранилище) Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	" + Реквизит.Имя;
			КонецЕсли; 
		КонецЦикла; 

		ИменаПолейТЧ.Очистить();
		Если ОбъектМетаданных.ТабличныеЧасти.Количество() > 0 Тогда
			
			ТипЧисло = Тип("Число");
			АгрегатныеФункции = Новый Массив;
			АгрегатныеФункции.Добавить("Сумма");
			АгрегатныеФункции.Добавить("Минимум");
			АгрегатныеФункции.Добавить("Максимум");
			АгрегатныеФункции.Добавить("Среднее");
			
			Для каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				
				ИмяПоля = ТабличнаяЧасть.Имя + "КоличествоСтрок";
				ТекстЗапроса = ТекстЗапроса + ",
				|	ЕСТЬNULL(ТЧ" + ТабличнаяЧасть.Имя + ".КоличествоСтрок, 0) КАК " + ИмяПоля;
				ИменаПолейТЧ.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоля));
				
				Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл    
					Если Реквизит.Тип.Типы().Количество() = 1 И Реквизит.Тип.СодержитТип(ТипЧисло) Тогда
						Для каждого ЭлементМассива Из АгрегатныеФункции Цикл
							ИмяПоля = ТабличнаяЧасть.Имя + Реквизит.Имя + ЭлементМассива;
							ТекстЗапроса = ТекстЗапроса + ",
							|	ЕСТЬNULL(ТЧ" + ТабличнаяЧасть.Имя + "."+ Реквизит.Имя + ЭлементМассива + ", 0) КАК " + ИмяПоля;
							ИменаПолейТЧ.Добавить(Новый ПолеКомпоновкиДанных(ИмяПоля));
						КонецЦикла; //Для каждого ЭлементМассива Из  
					КонецЕсли; 
				КонецЦикла; //Для каждого РеквизитТЧ Из   
				
			КонецЦикла;
			
		КонецЕсли; 

		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ" + Символы.ПС;
		ТекстЗапроса = ТекстЗапроса + "	" + ИскомыйОбъект.ПолноеИмя + " КАК ТаблицаСсылок" + Символы.ПС;
		
		Если ОбъектМетаданных.ТабличныеЧасти.Количество() > 0 Тогда
			ШаблонСтрокиДляСоединенияТЧ = "
				|ЛЕВОЕ СОЕДИНЕНИЕ 
				|	(ВЫБРАТЬ
				|		ОбъектТЧ.Ссылка КАК %ТЧ%Ссылка,
				|		КОЛИЧЕСТВО(ОбъектТЧ.НомерСтроки) КАК КоличествоСтрок //АгрегатныеПоля
				|	ИЗ
				|		%Тип%.%Имя%.%ТЧ% КАК ОбъектТЧ
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ОбъектТЧ.Ссылка
				|	) КАК ТЧ%ТЧ%
				|	ПО (ТЧ%ТЧ%.%ТЧ%Ссылка = ТаблицаСсылок.Ссылка)	
				|";
			
			Для каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				ТекстЗапроса = ТекстЗапроса + ШаблонСтрокиДляСоединенияТЧ;
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ТЧ%", ТабличнаяЧасть.Имя);
				
				СтрокаДляАгрегатныхПолей = "";
				Для каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл    
					Если Реквизит.Тип.Типы().Количество() = 1 И Реквизит.Тип.СодержитТип(ТипЧисло) Тогда
						Для каждого ЭлементМассива Из АгрегатныеФункции Цикл
							СтрокаДляАгрегатныхПолей = СтрокаДляАгрегатныхПолей + ",
							|		" + ВРег(ЭлементМассива) + "(ОбъектТЧ." + Реквизит.Имя + ") КАК " + Реквизит.Имя + ЭлементМассива;
						КонецЦикла;
					КонецЕсли; 
				КонецЦикла; //Для каждого РеквизитТЧ Из   
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//АгрегатныеПоля", СтрокаДляАгрегатныхПолей);
			КонецЦикла;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//АгрегатныеПоля", "");
		КонецЕсли; 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Тип%", ИскомыйОбъект.Тип);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Имя%", ОбъектМетаданных.Имя);
		
	Иначе
		Для Каждого Реквизит Из ОбъектМетаданных.Измерения Цикл
			Если НЕ Реквизит.Тип.СодержитТип(ТипХранилище) Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	" + Реквизит.Имя;
			КонецЕсли; 
		КонецЦикла; 
		Для Каждого Реквизит Из ОбъектМетаданных.Ресурсы Цикл
			Если НЕ Реквизит.Тип.СодержитТип(ТипХранилище) Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	" + Реквизит.Имя;
			КонецЕсли; 
		КонецЦикла; 
		Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
			Если НЕ Реквизит.Тип.СодержитТип(ТипХранилище) Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				|	" + Реквизит.Имя;
			КонецЕсли; 
		КонецЦикла; 
		ТекстЗапроса = ТекстЗапроса + "
			|	//Отображаемые поля
			|ИЗ" + Символы.ПС;
		ТекстЗапроса = ТекстЗапроса + "	" + ИскомыйОбъект.ПолноеИмя + " КАК ТаблицаСсылок" + Символы.ПС;
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура НайтиСсылкиПоОтбору()
	
	МассивРеквизитов = Новый Массив;
	
	Если РежимОтбора = 1 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстПроизвольногоЗапроса;
		Для Каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
			Если СтрокаПараметров.ЭтоВыражение Тогда
				Запрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
			Иначе
				Запрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		Попытка
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	Иначе
		
		ПолучитьНастройкиКомпоновщика();
		
		ТекстЗапросаСКД = ТекстЗапроса;
		УсловиеПоискаПоСтроке = СформироватьУсловиеПоискаПоСтроке(СтрокаПоиска, ОбъектПоиска);
	
		Если ЗначениеЗаполнено(УсловиеПоискаПоСтроке) Тогда
			
			ТекстЗапросаСКД = ТекстЗапросаСКД + "
			|ГДЕ 
			|	" + УсловиеПоискаПоСтроке;
			
		КонецЕсли;
		
		СКД = Новый СхемаКомпоновкиДанных;
		ИсточникДанныхСКД = СКД.ИсточникиДанных.Добавить();
		ИсточникДанныхСКД.ТипИсточникаДанных = "local";
		ИсточникДанныхСКД.Имя = "ИсточникДанных";
		
		НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НаборДанных.Имя = "НаборДанныхЗапроса";
		НаборДанных.Запрос = ТекстЗапросаСКД;
		НаборДанных.ИсточникДанных = ИсточникДанныхСКД.Имя;
		НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
		
		Если ЭтоПериодическийОбъект(ОбъектПоиска) Тогда
			ПараметрСКД = СКД.Параметры.Добавить();
			ПараметрСКД.Имя = "Период";
			ПараметрСКД.ТипЗначения = Новый ОписаниеТипов("СтандартныйПериод");
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
			ПараметрСКД.ОграничениеИспользования = Ложь;
			ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
			
			ПараметрСКД = СКД.Параметры.Добавить();
			ПараметрСКД.Имя = "НачДата";
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
			ПараметрСКД.ОграничениеИспользования = Истина;
			ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
			ПараметрСКД.Выражение = "&Период.ДатаНачала";
				
			ПараметрСКД = СКД.Параметры.Добавить();
			ПараметрСКД.Имя = "КонДата";
			ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
			ПараметрСКД.ОграничениеИспользования = Истина;
			ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
			ПараметрСКД.Выражение = "&Период.ДатаОкончания";
		КонецЕсли; 
		
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД);
		КомпоновщикНастроекДляПоиска = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроекДляПоиска.Инициализировать(ИсточникНастроек); 
		
		Если ОтборДанных <> Неопределено Тогда
			НастройкиСКД = ОтборДанных;
		Иначе
			НастройкиСКД = СКД.НастройкиПоУмолчанию;
		КонецЕсли;
		
		КомпоновщикНастроекДляПоиска.ЗагрузитьНастройки(НастройкиСКД);
		
		КомпоновщикНастроекДляПоиска.Настройки.Структура.Очистить();
		ГруппировкаСКД = КомпоновщикНастроекДляПоиска.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаСКД.Использование = Истина;
		
		ЕстьПолеОбъект = Ложь;
		ПолеОбъект = Новый ПолеКомпоновкиДанных("Объект");
		ЕстьПолеКартинка = Ложь;
		ПолеКартинка = Новый ПолеКомпоновкиДанных("Картинка");
		
		Если КомпоновщикНастроекДляПоиска.Настройки.Выбор.Элементы.Количество() = 0 Тогда
			
			ВыбранныеПоля = ГруппировкаСКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ВыбранныеПоля.Использование = Истина;
			
			НовыйЭлемент = КомпоновщикНастроекДляПоиска.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовыйЭлемент.Использование = Истина;
			НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядку"); //SystemFields.GroupSerialNumber
			
			Для каждого ЭлементДоступногоВыбора Из КомпоновщикНастроекДляПоиска.Настройки.ДоступныеПоляВыбора.Элементы Цикл    
				Если НЕ ЭлементДоступногоВыбора.Папка Тогда
					Если ИменаПолейТЧ.НайтиПоЗначению(ЭлементДоступногоВыбора.Поле) = Неопределено Тогда
						НовыйЭлемент = КомпоновщикНастроекДляПоиска.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементДоступногоВыбора);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; //Для каждого ЭлементДоступногоВыбора Из   
			
			Если ИменаПолейТЧ.Количество() > 0 Тогда
				ГруппаЭлементов = КомпоновщикНастроекДляПоиска.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
				ГруппаЭлементов.Использование = Истина;
				ГруппаЭлементов.Заголовок = НСтр("ru = 'Агрегатные поля'");
				
				Для каждого ЭлементМассива Из ИменаПолейТЧ Цикл    
					Если КомпоновщикНастроекДляПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ЭлементМассива.Значение) <> Неопределено Тогда
						НовыйЭлемент = ГруппаЭлементов.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					    НовыйЭлемент.Использование = Истина;
					    НовыйЭлемент.Поле = ЭлементМассива.Значение;
					КонецЕсли; 
				КонецЦикла; //Для каждого ЭлементМассива Из  
			КонецЕсли; 
			
		Иначе
			
			Для каждого ПолеВыбора Из КомпоновщикНастроекДляПоиска.Настройки.Выбор.Элементы Цикл    
				Если ПолеВыбора.Использование Тогда
					ВыбранноеПоле = ГруппировкаСКД.Выбор.Элементы.Добавить(ТипЗнч(ПолеВыбора));
					ЗаполнитьЗначенияСвойств(ВыбранноеПоле, ПолеВыбора);
					Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
						Для каждого ПолеГруппы Из ПолеВыбора.Элементы Цикл
							ВыбранноеПолеГруппы = ВыбранноеПоле.Элементы.Добавить(ТипЗнч(ПолеГруппы));
							ЗаполнитьЗначенияСвойств(ВыбранноеПолеГруппы, ПолеГруппы);
						КонецЦикла;
					КонецЕсли;  //  
					Если НЕ ЕстьПолеОбъект И ПолеВыбора.Поле = ПолеОбъект Тогда
						ЕстьПолеОбъект = Истина;
					КонецЕсли; 
					Если НЕ ЕстьПолеКартинка И ПолеВыбора.Поле = ПолеКартинка Тогда
						ЕстьПолеКартинка = Истина;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; //Для каждого ПолеВыбора Из  
			
			Если НЕ ЕстьПолеОбъект Тогда
				ВыбранноеПоле = ГруппировкаСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Поле = ПолеОбъект;
			КонецЕсли; 
			Если НЕ ЕстьПолеКартинка Тогда
				ВыбранноеПоле = ГруппировкаСКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Использование = Истина;
				ВыбранноеПоле.Поле = ПолеКартинка;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Для каждого ЭлементДоступногоПорядка Из КомпоновщикНастроекДляПоиска.Настройки.Порядок.Элементы Цикл
			Если ЭлементДоступногоПорядка.Использование Тогда
				НовыйПорядок = ГруппировкаСКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйПорядок, ЭлементДоступногоПорядка);
			КонецЕсли; 
		КонецЦикла; //Для каждого ЭлементДоступногоПорядка Из   
		
		Попытка
			
			// Подготовка компоновщика макета компоновки данных.
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроекДляПоиска.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

			ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКД.Инициализировать(МакетКомпоновки);

			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.ОтображатьПроцентВывода = Истина;
			ТаблицаРезультата = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
			ПроцессорВывода.Вывести(ПроцессорКД);
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	МассивРеквизитов.Добавить("Выбрать");
	МассивРеквизитов.Добавить("Картинка");
	МассивРеквизитов.Добавить("Объект");
	Если ТаблицаРезультата.Колонки.Найти("Выбрать") = Неопределено Тогда
		ТаблицаРезультата.Колонки.Вставить(0, "Выбрать");
		ТаблицаРезультата.ЗаполнитьЗначения(Истина, "Выбрать");
	КонецЕсли;
	
	СоздатьКолонки(ТаблицаРезультата, МассивРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОбъектПоискаВСпискеВыбора()
	
	СписокВыбора = Элементы.ПолеОбъектПоиска.СписокВыбора;
	Для каждого ЭлементСписка Из СписокВыбора Цикл
		Если ЭлементСписка.Значение.ПолноеИмя = ОбъектПоиска.ПолноеИмя И СписокВыбора.Количество() > 1 Тогда
			СписокВыбора.Сдвинуть(ЭлементСписка, - СписокВыбора.Индекс(ЭлементСписка));
			СписокВыбора[0].Значение = ОбъектПоиска;
			СписокВыбора[0].Представление = ОбъектПоискаПредставление;
			Возврат;
		КонецЕсли; 
  	КонецЦикла;
	СписокВыбора.Вставить(0, ОбъектПоиска, ОбъектПоискаПредставление);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборОбъектаМетаданных()
	
	ПараметрФормы = Новый Структура;
	Если ОбъектПоиска <> Неопределено Тогда
		ПараметрФормы.Вставить("ТекущаяСтрока", ОбъектПоиска.ПолноеИмя);
	КонецЕсли;  //  
	
	Результат = ОткрытьФормуМодально(ПолучитьПолноеИмяФормы("ВыборОбъектаМетаданных"), ПараметрФормы, ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		
		ПолноеИмяОбъекта = Результат.Имя;
		Если ТипЗнч(ОбъектПоиска) = Тип("Структура") И ОбъектПоиска.Свойство("ПолноеИмя") И ПолноеИмяОбъекта = ОбъектПоиска.ПолноеИмя Тогда
			Возврат;
		КонецЕсли; 
		
		ПозицияТочки = Найти(ПолноеИмяОбъекта, ".");
		ТипОбъекта = Лев(ПолноеИмяОбъекта, ПозицияТочки - 1);
		ИмяОбъекта = Сред(ПолноеИмяОбъекта, ПозицияТочки + 1);
		ОбъектПоиска = ЗаполнитьСтруктуруОбъектаПоиска(ТипОбъекта, ИмяОбъекта, Результат.Синоним, Ложь);
		ОбъектПоиска.РежимОтбора  = РежимОтбора;

		ОбъектПоискаПредставление = ОбъектПоиска.Представление;
		ПриИзмененииОбъектаПоиска();
		СохранитьОбъектПоискаВСпискеВыбора();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	Если ОбъектПоиска = Неопределено Тогда
		Элементы.НайтиОбъекты.Доступность = Ложь;
		Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Доступность = Элементы.НайтиОбъекты.Доступность;
		Элементы.НайденныеОбъектыОткрытьФормуСписка.Доступность = Ложь;
	Иначе
		Элементы.НайтиОбъекты.Доступность = Истина;
		Элементы.КомпоновщикНастроекНастройкиОтборНайтиОбъекты.Доступность = Элементы.НайтиОбъекты.Доступность;
		Элементы.НайденныеОбъектыОткрытьФормуСписка.Доступность = Истина;
		Если НЕ ЭтоПериодическийОбъект(ОбъектПоиска) Тогда
			Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.Видимость = Ложь;
		ИначеЕсли НЕ Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.Видимость Тогда
			Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.Видимость = Истина;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектыКлиент()
	
	Состояние("Поиск объектов...");
	СохранитьОбъектПоиска();
	НайтиСсылкиПоОтбору();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНайденныеОбъекты;
	
КонецПроцедуры

// Возвращает экземпляр текущего объекта
//
//
&НаСервере
Функция ЭтотОбъект()

	Обработка = РеквизитФормыВЗначение("Объект");
	Возврат Обработка;

КонецФункции // ЭтотОбъект()

&НаСервере
Функция СохранитьНастройкиОбработокСервер(АдресВХранилище)

	Перем Настройки;
	
	Настройки = Новый Соответствие();

	Настройки.Вставить("ДоступныеОбработки", РеквизитФормыВЗначение("ДоступныеОбработки"));
	Настройки.Вставить("ВыбранныеОбработки", РеквизитФормыВЗначение("ВыбранныеОбработки"));

	ИмяФайлаНаСервере = ПолучитьИмяВременногоФайла("sav");
	Если НЕ ЗначениеВФайл(ИмяФайлаНаСервере, Настройки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайлаНаСервере);
	Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СохранитьНастройкиОтборовСервер(АдресВХранилище, ИмяФайлаНаСервере = "")

	Перем Настройки;
	
	Настройки = Новый Соответствие();

	ПолучитьНастройкиКомпоновщика();
	
	Настройки.Вставить("ОтборДанных", ОтборДанных);
	Настройки.Вставить("ОбъектПоискаПредставление", ОбъектПоискаПредставление);
	Настройки.Вставить("ОбъектПоиска", ОбъектПоиска);
	Настройки.Вставить("ОбъектыПоиска", ОбъектыПоиска);
	
	Настройки.Вставить("СтрокаПоиска.СписокВыбора", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	Настройки.Вставить("ОбъектПоиска.СписокВыбора", Элементы.ПолеОбъектПоиска.СписокВыбора);
	
	ИмяФайлаНаСервере = ПолучитьИмяВременногоФайла("sav");
	Если НЕ ЗначениеВФайл(ИмяФайлаНаСервере, Настройки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаНаСервере);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтаФорма.УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайлаНаСервере);
	Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьКолонкиДляСовместимости(Знач ТаблицаДанных)  
	
	Если ТаблицаДанных <> Неопределено Тогда
		//Для совместимости с прежними версиями
		Если ТаблицаДанных.Колонки.Найти("Идентификатор") = Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			КЧ = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
			ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов, КЧ);
			ТаблицаДанных.Колонки.Добавить("Идентификатор", ОписаниеТипаЧисло);
		КонецЕсли; 
	КонецЕсли; 
	Возврат ТаблицаДанных;
	
КонецФункции //

&НаСервере
Процедура ЗагрузитьДоступныеОбработкиИзНастроекСервер(Настройки)

	ДоступныеОбработкиТаблица = Настройки["ДоступныеОбработки"];
	//Для совместимости с прежними версиями
	Если ДоступныеОбработкиТаблица <> Неопределено Тогда
		ДоступныеОбработкиТаблица = ДобавитьКолонкиДляСовместимости(ДоступныеОбработкиТаблица);
		ЭлементыДерева = ЭтаФорма.ДоступныеОбработки.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
		Для каждого СтрокаДерева Из ДоступныеОбработкиТаблица.Строки Цикл
			НоваяСтрокаДерева = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			Для каждого ПодСтрокаДерева Из СтрокаДерева.Строки Цикл    
				ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева.ПолучитьЭлементы().Добавить(), ПодСтрокаДерева);
			КонецЦикла; //Для каждого  Из   
  		КонецЦикла; //Для каждого  Из  
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСпискиВыбораИзНастроекСервер(Настройки)

	СписокВыбора = Настройки.Получить("СтрокаПоиска.СписокВыбора");
	Если СписокВыбора <> Неопределено И ТипЗнч(СписокВыбора) = Тип("Массив") Тогда
		Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли; 
	
	СписокВыбора = Настройки.Получить("ОбъектПоиска.СписокВыбора");
	Если СписокВыбора <> Неопределено И ТипЗнч(СписокВыбора) = Тип("СписокЗначений") Тогда
		Элементы.ПолеОбъектПоиска.СписокВыбора.Очистить();
		Для каждого ЭлементСписка Из СписокВыбора Цикл    
			Элементы.ПолеОбъектПоиска.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла; //Для каждого ЭлементСписка Из  
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОбработокСервер(АдресВХранилище)

	Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("sav");
	
	// получаем файл настроек для зачитки
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Настройки = ЗначениеИзФайла(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	ЗагрузитьДоступныеОбработкиИзНастроекСервер(Настройки);
	
	ВыбранныеОбработкиТаблица = Настройки["ВыбранныеОбработки"];
	Если ВыбранныеОбработкиТаблица <> Неопределено Тогда
		ЭтаФорма.ВыбранныеОбработки.Загрузить(ВыбранныеОбработкиТаблица);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтборовСервер(АдресВХранилище)

	Если НЕ ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("sav");
	// получаем файл настроек для зачитки
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	Настройки = ЗначениеИзФайла(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	
	ОбъектПоискаПредставление = Настройки["ОбъектПоискаПредставление"];
	ОбъектПоиска = Настройки["ОбъектПоиска"];
	ОтборДанных = Настройки["ОтборДанных"];
	ОбъектыПоиска = Настройки["ОбъектыПоиска"];
	
	Если ТипЗнч(ОбъектПоиска) = Тип("Структура") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектПоиска.Тип + "." + ОбъектПоиска.Имя);
		Если ОбъектМетаданных = Неопределено Тогда
			ОбъектПоиска = Неопределено;
			ОбъектПоискаПредставление = "";
			ОтборДанных = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	
	ЗагрузитьСпискиВыбораИзНастроекСервер(Настройки);
	
	Если ТипЗнч(ОбъектПоиска) = Тип("Структура") И НЕ ОбъектПоиска.Свойство("ПолноеИмя") Тогда
		ОбъектПоиска.Вставить("ПолноеИмя", ОбъектПоиска.Тип + "." + ОбъектПоиска.Имя);
	КонецЕсли; 
	
	Если ТипЗнч(ОбъектыПоиска) <> Тип("Структура") Тогда
		ОбъектыПоиска = Новый Структура;
	КонецЕсли; 
	
	Если ТипЗнч(ОбъектПоиска) = Тип("Структура") Тогда
		Если НЕ ОбъектПоиска.Свойство("РежимОтбора") Тогда
			ОбъектПоиска.Вставить("РежимОтбора", 0);
		Иначе
			РежимОтбора  = ОбъектПоиска.РежимОтбора;
		КонецЕсли; 
		ПриИзмененииОбъектаПоиска();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройкиОбработокСервер()
	
	ЭтотОбъект().ЗагрузитьОбработки(ЭтаФорма, ДоступныеОбработки, ВыбранныеОбработки, СтруктураФорм);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСтруктуруОбъектаПоиска(Знач ТипОбъекта = "", Знач ИмяОбъекта = "", Знач СинонимОбъекта = "", ДобавлятьИмяОбъекта = Истина)

	Структура = Новый Структура;
	Структура.Вставить("Тип", ТипОбъекта);
	Структура.Вставить("Имя", ИмяОбъекта);
	Если ЗначениеЗаполнено(ТипОбъекта) Тогда 
		Структура.Вставить("ПолноеИмя", ТипОбъекта + "." + ИмяОбъекта);
		Структура.Вставить("Представление", СинонимОбъекта + ?(ДобавлятьИмяОбъекта, " (" + ТипОбъекта + "." + ИмяОбъекта + ")", ""));
	Иначе
		Структура.Вставить("ПолноеИмя", "");
		Структура.Вставить("Представление", "");
	КонецЕсли; 
	Структура.Вставить("РежимОтбора", 0);
	Возврат Структура;

КонецФункции // ЗаполнитьСтруктуруОбъектаПоиска()

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокОбъектовМетаданных(Список, ТипОбъекта, ОбъектыМетаданных)

	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
			СинонимОбъекта = ОбъектМетаданных.Синоним;
			Если Не ЗначениеЗаполнено(СинонимОбъекта) Тогда
				СинонимОбъектаа = ОбъектМетаданных.Имя;
			КонецЕсли;
			Структура = ЗаполнитьСтруктуруОбъектаПоиска(ТипОбъекта, ОбъектМетаданных.Имя, СинонимОбъекта);
			Список.Добавить(Структура, СинонимОбъекта, , БиблиотекаКартинок[ТипОбъекта]);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСписокОбъектовМетаданных()

&НаКлиенте
Процедура ОткрытьФормуОбработки(ТекущаяСтрока, ИндексСтроки = Неопределено)
	
	СтруктураПараметров = СформироватьСтруктуруПараметров();
	СтруктураПараметров.Настройка = ТекущаяСтрока.Настройка[0].Значение;
	Если ТипЗнч(СтруктураПараметров.Настройка) = Тип("Структура") 
		И СтруктураПараметров.Настройка.Свойство("Прочее") И СтруктураПараметров.Настройка.Прочее = Неопределено Тогда
		СтруктураПараметров.Настройка.Прочее = ПолучитьНастройкуПоУмолчанию().Прочее;
	КонецЕсли; 
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, ТекущаяСтрока.ИмяФормы) Тогда
			Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров.Настройки = СформироватьНастройки(ТекущаяСтрока);
		СтруктураПараметров.Вставить("Родитель", ТекущаяСтрока.ПолучитьИдентификатор());
		СтруктураПараметров.Вставить("ТекущаяСтрока", Неопределено);
		
		Обработка = ПолучитьФорму(ПолучитьПолноеИмяФормы(ТекущаяСтрока.ИмяФормы), СтруктураПараметров, ЭтаФорма);
	Иначе
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, Родитель.ИмяФормы) Тогда
			Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров.Настройки = СформироватьНастройки(Родитель);
		СтруктураПараметров.Вставить("Родитель", Родитель.ПолучитьИдентификатор());
		СтруктураПараметров.Вставить("ТекущаяСтрока", ИндексСтроки);
		
		Обработка = ПолучитьФорму(ПолучитьПолноеИмяФормы(Родитель.ИмяФормы), СтруктураПараметров, ЭтаФорма);
	КонецЕсли;

	ОткрытьФормуМодально(Обработка);
	
КонецПроцедуры

// Добавляет отбор в набор отборов компоновщика или группы отборов
//
&НаСервереБезКонтекста
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

// Процедура удаляет все элементы настроек СхемыКД 
//
&НаСервереБезКонтекста
Процедура ОчиститьНастройкиСКД(Настройки)
	
	Если Настройки = Неопределено ИЛИ Тип(Настройки) <> Тип("НастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		Параметр.Значение = Неопределено;
		Параметр.Использование = Ложь;
	КонецЦикла;
	
	Настройки.ПользовательскиеПоля.Элементы.Очистить();
	Настройки.Отбор.Элементы.Очистить();
	Настройки.Порядок.Элементы.Очистить();
	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки(КомпоновщикНастроек, Настройки)
	
	ОчиститьНастройкиСКД(КомпоновщикНастроек.Настройки);
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных();		
    	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных";
	Источник.СтрокаСоединения="";
	Источник.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанныхЗапроса";
	НаборДанных.ИсточникДанных = Источник.Имя;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	Если ЭтоПериодическийОбъект(ОбъектПоиска) Тогда
		ПараметрСКД = СхемаКомпоновки.Параметры.Добавить();
		ПараметрСКД.Имя = "Период";
		ПараметрСКД.ТипЗначения = Новый ОписаниеТипов("СтандартныйПериод");
		ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрСКД.ОграничениеИспользования = Ложь;
		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
		
		ПараметрСКД = СхемаКомпоновки.Параметры.Добавить();
		ПараметрСКД.Имя = "НачДата";
		ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрСКД.ОграничениеИспользования = Истина;
		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрСКД.Выражение = "&Период.ДатаНачала";
			
		ПараметрСКД = СхемаКомпоновки.Параметры.Добавить();
		ПараметрСКД.Имя = "КонДата";
		ПараметрСКД.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрСКД.ОграничениеИспользования = Истина;
		ПараметрСКД.ВключатьВДоступныеПоля = Ложь;
		ПараметрСКД.Выражение = "&Период.ДатаОкончания";
	КонецЕсли; 
		
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)); 
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		Период = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("Период");
		Если Период <> Неопределено Тогда
			Период.Использование = Ложь;
			Период.Значение = Новый СтандартныйПериод();
		КонецЕсли; 
		Период = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачДата");
		Если Период <> Неопределено Тогда
			Период.Использование = Ложь;
			Период.Значение = Дата(1,1,1);
		КонецЕсли; 
		Период = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонДата");
		Если Период <> Неопределено Тогда
			Период.Использование = Ложь;
			Период.Значение = Дата(1,1,1);
		КонецЕсли; 
	КонецЕсли;
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0 Тогда
		Для каждого ЭлементДоступногоОтбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы Цикл    
			ДобавитьОтбор(КомпоновщикНастроек.Настройки.Отбор, ЭлементДоступногоОтбора.Поле, , ВидСравненияКомпоновкиДанных.Равно, Ложь);
		КонецЦикла; //Для каждого ЭлементДоступногоОтбора Из   
	КонецЕсли; 
	
	Если КомпоновщикНастроек.Настройки.Порядок.Элементы.Количество() = 0 Тогда
		Для каждого ЭлементДоступногоПорядка Из КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка.Элементы Цикл    
			НовыйПорядок = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		    НовыйПорядок.Использование = Ложь;
		    НовыйПорядок.Поле = ЭлементДоступногоПорядка.Поле;
		    НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЦикла; //Для каждого ЭлементДоступногоПорядка Из   
	КонецЕсли; 
	
	Если КомпоновщикНастроек.Настройки.Выбор.Элементы.Количество() = 0 Тогда
		НовыйЭлемент = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовыйЭлемент.Использование = Истина;
		НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядку"); //SystemFields.GroupSerialNumber
		
		Для каждого ЭлементДоступногоВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл    
			Если НЕ ЭлементДоступногоВыбора.Папка Тогда
				Если ИменаПолейТЧ.НайтиПоЗначению(ЭлементДоступногоВыбора.Поле) = Неопределено Тогда
					НовыйЭлемент = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				    НовыйЭлемент.Использование = Истина;
				    НовыйЭлемент.Поле = ЭлементДоступногоВыбора.Поле;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; //Для каждого ЭлементДоступногоВыбора Из   
		
		Если ИменаПолейТЧ.Количество() > 0 Тогда
			
			ГруппаЭлементов = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаЭлементов.Использование = Истина;
			ГруппаЭлементов.Заголовок = НСтр("ru = 'Агрегатные поля'");
			
			Для каждого ЭлементМассива Из ИменаПолейТЧ Цикл    
				Если КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(ЭлементМассива.Значение) <> Неопределено Тогда
					НовыйЭлемент = ГруппаЭлементов.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				    НовыйЭлемент.Использование = Истина;
				    НовыйЭлемент.Поле = ЭлементМассива.Значение;
				КонецЕсли; 
			КонецЦикла; //Для каждого ЭлементМассива Из  
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

//////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ОчиститьКомандыКонтекстноеМенюНайденныеОбъекты()
	
	Для каждого ЭлементСтруктуры Из СтруктураФорм Цикл    
		Команда = ЭтаФорма.Команды.Найти(ЭлементСтруктуры.Ключ);
		Если Команда <> Неопределено Тогда
			ЭтаФорма.Команды.Удалить(Команда);
		КонецЕсли; 
		ЭлементФормы = Элементы.Найти("НайденныеОбъектыКонтекстноеМеню_" + ЭлементСтруктуры.Ключ);
		Если ЭлементФормы <> Неопределено Тогда
			ЭтаФорма.Элементы.Удалить(ЭлементФормы);
		КонецЕсли; 
	КонецЦикла; //Для каждого ЭлементСтруктуры Из  
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонтекстноеМенюНайденныеОбъекты()
	
	ГруппаМеню = Элементы.НайденныеОбъекты.КонтекстноеМеню;
	Для Каждого Стр Из ДоступныеОбработки.ПолучитьЭлементы() Цикл
		НоваяКоманда = ЭтаФорма.Команды.Добавить(Стр.ИмяФормы);
		НоваяКоманда.Действие = "Подключаемый_ВыполнитьОбработку";
		НоваяКоманда.Заголовок = Стр.Обработка;
		НоваяКоманда.Картинка = БиблиотекаКартинок.Обработка;
		НовыйЭлемент =  Элементы.Добавить("НайденныеОбъектыКонтекстноеМеню_" + Стр.ИмяФормы, Тип("КнопкаФормы"), ГруппаМеню);
		НовыйЭлемент.ИмяКоманды = НоваяКоманда.Имя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ПолеОбъектПоиска.ВысотаСпискаВыбора = 15;
	Элементы.ПолеОбъектПоиска.СписокВыбора.ТипЗначения = Новый ОписаниеТипов("Структура");
	
	//ЗаполнитьСписокОбъектовМетаданных(СписокОбъектовМетаданных, "Справочник", Метаданные.Справочники);
	//ЗаполнитьСписокОбъектовМетаданных(СписокОбъектовМетаданных, "ПланВидовХарактеристик", Метаданные.ПланыВидовХарактеристик);
	//ЗаполнитьСписокОбъектовМетаданных(СписокОбъектовМетаданных, "ПланВидовРасчета", Метаданные.ПланыВидовРасчета);
	//ЗаполнитьСписокОбъектовМетаданных(СписокОбъектовМетаданных, "ПланОбмена", Метаданные.ПланыОбмена);
	//ЗаполнитьСписокОбъектовМетаданных(СписокОбъектовМетаданных, "Документ", Метаданные.Документы);
	//ЗаполнитьСписокОбъектовМетаданных(СписокОбъектовМетаданных, "БизнесПроцесс", Метаданные.БизнесПроцессы);
	//ЗаполнитьСписокОбъектовМетаданных(СписокОбъектовМетаданных, "Задача", Метаданные.Задачи);
	
	ЭтотОбъект().ЗагрузитьОбработки(ЭтаФорма, ДоступныеОбработки, ВыбранныеОбработки, СтруктураФорм);
	ЗаполнитьКонтекстноеМенюНайденныеОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработкаПеретаскивание = Ложь;
	
	УстановитьВидимостьДоступность();
	УстановитьКартинкиОбработок();
		
	Если ТипЗнч(ОбъектыПоиска) <> Тип("Структура") Тогда
		ОбъектыПоиска = Новый Структура;
	КонецЕсли; 
	
	Если ТипЗнч(ОбъектПоиска) <> Тип("Структура") Тогда
		ОбъектПоиска = ЗаполнитьСтруктуруОбъектаПоиска();
	КонецЕсли; 
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ". " + Объект.Версия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьОбъектПоиска();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ОбъектПоиска = Настройки["ОбъектПоиска"];
	ОтборДанных = Настройки["ОтборДанных"];
	ОбъектыПоиска = Настройки["ОбъектыПоиска"];
	
	Если ТипЗнч(ОбъектПоиска) = Тип("Структура") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектПоиска.Тип + "." + ОбъектПоиска.Имя);
		Если ОбъектМетаданных = Неопределено Тогда
			ОбъектПоиска = Неопределено;
			ОбъектПоискаПредставление = "";
			ОтборДанных = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
		
	ЗагрузитьСпискиВыбораИзНастроекСервер(Настройки);
	//ЗагрузитьДоступныеОбработкиИзНастроекСервер(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ТипЗнч(ОбъектПоиска) = Тип("Структура") Тогда
		Если НЕ ОбъектПоиска.Свойство("ПолноеИмя") И ЗначениеЗаполнено(ОбъектПоиска.Тип) Тогда
			ОбъектПоиска.Вставить("ПолноеИмя", ОбъектПоиска.Тип + "." + ОбъектПоиска.Имя);
		КонецЕсли; 
		Если НЕ ОбъектПоиска.Свойство("РежимОтбора") Тогда
			ОбъектПоиска.Вставить("РежимОтбора", 0);
		Иначе
			РежимОтбора  = ОбъектПоиска.РежимОтбора;
		КонецЕсли; 
		ПриИзмененииОбъектаПоиска(Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Настройки.Вставить("ОбъектПоиска.СписокВыбора", Элементы.ПолеОбъектПоиска.СписокВыбора);
	Настройки.Вставить("СтрокаПоиска.СписокВыбора", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

//////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПолеОбъектПоискаПриИзменении(Элемент)
	
	ПриИзмененииОбъектаПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОбъектПоискаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранитьОбъектПоиска();
	ВыборОбъектаМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОбъектПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СохранитьОбъектПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОбъектПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОбъектПоискаПредставление = ВыбранноеЗначение.Представление;
		ОбъектПоиска = ВыбранноеЗначение;
	Иначе
		ОбъектПоискаПредставление = "";
		ОбъектПоиска = Неопределено;
	КонецЕсли;
	
	Если ОбъектПоиска <> Неопределено Тогда
		
		ПриИзмененииОбъектаПоиска();
		СохранитьОбъектПоискаВСпискеВыбора();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СписокВыбора = Элементы.СтрокаПоиска.СписокВыбора;
		ПозицияСтроки = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
		Если ПозицияСтроки = Неопределено Тогда
			СписокВыбора.Вставить(0, СтрокаПоиска);
		Иначе
			СписокВыбора.Сдвинуть(ПозицияСтроки, - СписокВыбора.Индекс(ПозицияСтроки));
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройка = Элемент.ТекущиеДанные.Настройка[0].Значение;
	Настройка.Обработка = Элемент.ТекущиеДанные.Обработка;
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИндексСтроки = Элементы.ДоступныеОбработки.ТекущаяСтрока;
	ТекущаяСтрока = ДоступныеОбработки.НайтиПоИдентификатору(ИндексСтроки);
	ОткрытьФормуОбработки(ТекущаяСтрока, ИндексСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

	Родитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Если Копирование Тогда
			Отказ = Истина;
		Иначе
			Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, Элемент.ТекущиеДанные.ИмяФормы) Тогда
				Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Отказ = НЕ ПолучитьФорму(ПолучитьПолноеИмяФормы(Элемент.ТекущиеДанные.ИмяФормы)).мИспользоватьНастройки;
			Если НЕ Отказ Тогда
				//свое добавление
				Отказ = Истина;
				НоваяСтрока = ДобавитьСтроку(Элемент.ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, Родитель.ИмяФормы) Тогда
			Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Отказ = Истина;
		Если НЕ Копирование Тогда
			Если ПолучитьФорму(ПолучитьПолноеИмяФормы(Родитель.ИмяФормы)).мИспользоватьНастройки Тогда
				НоваяСтрока = ДобавитьСтроку(Родитель);
			КонецЕсли;
		Иначе
			ТекСтрока = Элемент.ТекущиеДанные;
			ТекРодитель = Родитель;
			НоваяСтрока = ДобавитьСтроку(ТекРодитель);
			
			Если НЕ ТекСтрока.Настройка[0].Значение = Неопределено Тогда
				НоваяНастройка = Новый Структура();
				Для Каждого РеквизитНастройки Из ТекСтрока.Настройка[0].Значение Цикл
					Значение = РеквизитНастройки.Значение;
					Выполнить("НоваяНастройка.Вставить(Строка(РеквизитНастройки.Ключ), Значение);");
				КонецЦикла;

				НоваяСтрока.Настройка[0].Значение = НоваяНастройка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Вопрос("Удалить настройку?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК) = КодВозвратаДиалога.ОК Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СтрокаДоступнойОбработки", Элемент.ТекущаяСтрока);
		
		МассивДляУдаления = ВыбранныеОбработки.НайтиСтроки(ПараметрыОтбора);
		Для Индекс = 0 по МассивДляУдаления.Количество() - 1 Цикл
			ВыбранныеОбработки.Удалить(МассивДляУдаления[Индекс]);
		КонецЦикла;
	Иначе
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОбработкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если НЕ ПроверитьДоступностьОбработки() Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Данная обработка недоступна для типа <" + ОбъектПоиска.Тип + ">");
		Возврат;
	КонецЕсли;
	
	ОбработкаПеретаскивание = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеОбработкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если НЕ ОбработкаПеретаскивание Тогда
		Возврат;

	КонецЕсли;
	
	Для Каждого СтрВыбранных Из ПараметрыПеретаскивания.Значение Цикл
		СтрВыбранныхИдентификатор = СтрВыбранных.ПолучитьИдентификатор();
		СтрДоступных = ДоступныеОбработки.НайтиПоИдентификатору(СтрВыбранныхИдентификатор);
		СтрДоступных.Идентификатор = СтрДоступных.ПолучитьИдентификатор();
		
		НовСтр = ВыбранныеОбработки.Добавить();
		НовСтр.ОбработкаНастройка = СтрДоступных.Обработка;
		НовСтр.СтрокаДоступнойОбработки = СтрДоступных.ПолучитьИдентификатор();
		НовСтр.Выбрать = Истина;
		НовСтр.Настройка = СтрДоступных.Настройка;
	КонецЦикла;
	
	ОбработкаПеретаскивание = Ложь;
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписиРегистра(Знач СтрокаТаблицы)
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектПоиска.ПолноеИмя);
	
	СтрокаТаблицы = НайденныеОбъекты.НайтиПоИдентификатору(СтрокаТаблицы);
	
	СтруктураОтбора = Новый Структура;
	Для Каждого Реквизит Из ОбъектМетаданных.Измерения Цикл
		СтруктураОтбора.Вставить(Реквизит.Имя, СтрокаТаблицы[Реквизит.Имя]);
	КонецЦикла; 
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		СтруктураОтбора.Вставить("Период", СтрокаТаблицы["Период"]);
	КонецЕсли; 
	КлючЗаписи = РегистрыСведений[ОбъектПоиска.Имя].СоздатьКлючЗаписи(СтруктураОтбора);
	
	Возврат КлючЗаписи;
	
Конецфункции //

&НаКлиенте
Процедура НайденныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НайденныеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Если ОбъектПоиска.Тип <> "РегистрСведений" Тогда
			ОткрытьЗначение(ТекущиеДанные.Объект);
		Иначе
			КлючЗаписи = ПолучитьКлючЗаписиРегистра(ВыбраннаяСтрока);
			ОткрытьФорму("РегистрСведений." + ОбъектПоиска.Имя + ".ФормаЗаписи", Новый Структура("Ключ", КлючЗаписи));
		КонецЕсли;  //  
	КонецЕсли;  
	
КонецПроцедуры

//////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
Процедура НайтиОбъекты(Команда)
	
	НайтиОбъектыКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	ВыбратьЭлементы(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборВсех(Команда)
	ВыбратьЭлементы(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	Для каждого ВыбраннаяОбработка из ВыбранныеОбработки Цикл
		ОбработкаПрерыванияПользователя();
		
		Если НЕ ВыбраннаяОбработка.Выбрать Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель = Неопределено;
		Для каждого ДоступныеОбработкиСтрока Из ДоступныеОбработки.ПолучитьЭлементы() Цикл
			Строки = ДоступныеОбработкиСтрока.ПолучитьЭлементы();
			Если Строки.Количество() > 0 Тогда
				Для каждого СтрокаСтроки Из Строки Цикл
					Если СтрокаСтроки.Идентификатор = ВыбраннаяОбработка.СтрокаДоступнойОбработки Тогда
						Стр = СтрокаСтроки;
						Родитель = ДоступныеОбработкиСтрока;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если Родитель <> Неопределено Тогда
					Прервать;
				КонецЕсли; 
			Иначе
				Если ДоступныеОбработкиСтрока.Обработка <> ВыбраннаяОбработка.ОбработкаНастройка Тогда
					Продолжить;
				КонецЕсли; 
				Стр = ДоступныеОбработкиСтрока;
			КонецЕсли; 
		КонецЦикла;
		
		//Стр = ДоступныеОбработки.НайтиПоИдентификатору(Строка.СтрокаДоступнойОбработки);
		//Родитель = Стр.ПолучитьРодителя();
		
		СтруктураПараметров = СформироватьСтруктуруПараметров();
		СтруктураПараметров.Настройка = Стр.Настройка[0].Значение;
		
		Если Родитель = Неопределено Тогда
			ИмяФормыОбработки = Стр.ИмяФормы;
			
			СтруктураПараметров.Настройки = СформироватьНастройки(Стр);
			СтруктураПараметров.Вставить("Родитель", Стр.ПолучитьИдентификатор());
			СтруктураПараметров.Вставить("ТекущаяСтрока", Неопределено);
		Иначе
			ИмяФормыОбработки = Родитель.ИмяФормы;
			
			СтруктураПараметров.Настройки = СформироватьНастройки(Родитель);
			СтруктураПараметров.Вставить("Родитель", Родитель.ПолучитьИдентификатор());
			СтруктураПараметров.Вставить("ТекущаяСтрока", ВыбраннаяОбработка.СтрокаДоступнойОбработки);
		КонецЕсли;
		
		Если НЕ ОбработкаДоступна(ОбъектПоиска.Тип, ИмяФормыОбработки) Тогда
			Сообщить("Обработка " + ИмяФормы + " недоступна для типа <" + ОбъектПоиска.Тип + ">");
			Продолжить;
		КонецЕсли;
		
		Обработка = ПолучитьФорму(ПолучитьПолноеИмяФормы(ИмяФормыОбработки), СтруктураПараметров, ЭтаФорма);
		Обработка.ЗагрузитьНастройку();
		Обработка.ВыполнитьОбработку();
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиКомпоновщика()
	
	ОтборДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор(Команда)
	Если ОбъектПоиска = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (ЗначениеЗаполнено(ОбъектПоиска.Тип) И ЗначениеЗаполнено(ОбъектПоиска.Имя)) Тогда 
		Возврат;
	КонецЕсли;
	
	ПолучитьНастройкиКомпоновщика();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекстЗапроса", ТекстЗапроса);
	СтруктураПараметров.Вставить("ТекстПроизвольногоЗапроса", ТекстПроизвольногоЗапроса);
	СтруктураПараметров.Вставить("СтрокаПоиска", СтрокаПоиска);
	СтруктураПараметров.Вставить("СтрокаПоискаСписок", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	СтруктураПараметров.Вставить("Настройки", ОтборДанных);
	СтруктураПараметров.Вставить("ОбъектПоиска", ОбъектПоиска);
	СтруктураПараметров.Вставить("РежимОтбора", ОбъектПоиска.РежимОтбора);
	СтруктураПараметров.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	СтруктураПараметров.Вставить("ИменаПолейТЧ", ИменаПолейТЧ);
	
	ФормаОтбора = ПолучитьФорму(ПолучитьПолноеИмяФормы("ФормаОтбора"), СтруктураПараметров, ЭтаФорма);
	РезультатОтбора = ОткрытьФормуМодально(ФормаОтбора);
	Если РезультатОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатОтбора(РезультатОтбора);
	СохранитьОбъектПоискаВСпискеВыбора();
	
	НачатьПоиск = Ложь;
	Если РезультатОтбора.Свойство("НачатьПоиск", НачатьПоиск) И НачатьПоиск Тогда
		НайтиОбъектыКлиент();
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеОбработки(Команда)
	ВыбратьОбработки("ВыбранныеОбработки", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыборВсехОбработок(Команда)
	ВыбратьОбработки("ВыбранныеОбработки", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбработки(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбрабатыватьВТранзакции", ОбрабатыватьВТранзакции);
	СтруктураПараметров.Вставить("КоличествоОбъектовНаТранзакцию", КоличествоОбъектовНаТранзакцию);
	СтруктураПараметров.Вставить("ИспользоватьРежимЗагрузкиОбменаДанными", ИспользоватьРежимЗагрузкиОбменаДанными);
	СтруктураПараметров.Вставить("РежимРаботы", РежимРаботы);
	
	ФормаНастроек = ПолучитьФорму(ПолучитьПолноеИмяФормы("ФормаНастроекУправляемая"), СтруктураПараметров, ЭтаФорма);
	РезультатОткрытия = ОткрытьФормуМодально(ФормаНастроек);
	
	Если ТипЗнч(РезультатОткрытия) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатОткрытия);
	КонецЕсли;
	
КонецПроцедуры

//Процедура-обработчик команды "Проголосовать"
//
&НаКлиенте
Процедура Проголосовать(Команда)
	
	ЗапуститьПриложение("http://infostart.ru/public/122215/?rate=1");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСписка(Команда)
	
	Если ОбъектПоиска <> Неопределено Тогда
		ПараметрыФормы = Новый Структура();
		Если Элементы.НайденныеОбъекты.ТекущиеДанные <> Неопределено Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.НайденныеОбъекты.ТекущиеДанные.Объект);
		КонецЕсли; 
		ОткрытьФорму(ОбъектПоиска.ПолноеИмя + ".ФормаСписка", ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиОбработок(Команда)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Фильтр                      =	НСтр("ru = 'Файл сохраненной настройки (*.sav)|*.sav'");
	ДиалогВыбораФайла.Заголовок                   =	НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Ложь;
	ДиалогВыбораФайла.Расширение                  =	"sav";
	ДиалогВыбораФайла.ИндексФильтра               =	0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	 Истина;
	ДиалогВыбораФайла.ПолноеИмяФайла = НСтр("ru = 'НастройкиОбработокУниверсальныйПодбор.sav'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		АдресВХранилище = "";
		Если НЕ СохранитьНастройкиОбработокСервер(АдресВХранилище) Тогда
			Предупреждение(НСтр("ru = 'Настройка не сохранена!!!'"));
		Иначе
			ПолучитьФайл(АдресВХранилище, ИмяФайла, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиОтборов(Команда)
	
	Если ОбъектПоиска.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'Не указан объект поиска!!!'"));
	КонецЕсли; 
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Фильтр                      =	НСтр("ru = 'Файл сохраненной настройки (*.sav)|*.sav'");
	ДиалогВыбораФайла.Заголовок                   =	НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Ложь;
	ДиалогВыбораФайла.Расширение                  =	"sav";
	ДиалогВыбораФайла.ИндексФильтра               =	0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	 Истина;
	ДиалогВыбораФайла.ПолноеИмяФайла = НСтр("ru = 'НастройкиОтборовУниверсальныйПодбор.sav'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		АдресВХранилище = "";
		Если НЕ СохранитьНастройкиОтборовСервер(АдресВХранилище) Тогда
			Предупреждение(НСтр("ru = 'Настройки не сохранены!!!'"));
		Иначе
			ПолучитьФайл(АдресВХранилище, ИмяФайла, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиОбработок(Команда)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      =	НСтр("ru = 'Файл сохраненной настройки (*.sav)|*.sav'");
	ДиалогВыбораФайла.Заголовок                   =	НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Ложь;
	ДиалогВыбораФайла.Расширение                  =	"sav";
	ДиалогВыбораФайла.ИндексФильтра               =	0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	 Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		Адрес = "";
		ПоместитьФайл(Адрес, ИмяФайла, ИмяФайла, Ложь, ЭтаФорма.УникальныйИдентификатор);
		ЗагрузитьНастройкиОбработокСервер(Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиОтборов(Команда)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      =	НСтр("ru = 'Файл сохраненной настройки (*.sav)|*.sav'");
	ДиалогВыбораФайла.Заголовок                   =	НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Ложь;
	ДиалогВыбораФайла.Расширение                  =	"sav";
	ДиалогВыбораФайла.ИндексФильтра               =	0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	 Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		Адрес = "";
		ПоместитьФайл(Адрес, ИмяФайла, ИмяФайла, Ложь, ЭтаФорма.УникальныйИдентификатор);
		ЗагрузитьНастройкиОтборовСервер(Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкиОбработок(Команда)
	
	ВыбранныеОбработки.Очистить();
	ДоступныеОбработки.ПолучитьЭлементы().Очистить();
	
	ОчиститьКомандыКонтекстноеМенюНайденныеОбъекты();
	ОчиститьНастройкиОбработокСервер();
	УстановитьКартинкиОбработок();
	ЗаполнитьКонтекстноеМенюНайденныеОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокОбработок(Команда)
	
	ОчиститьКомандыКонтекстноеМенюНайденныеОбъекты();
	ОчиститьНастройкиОбработокСервер();
	УстановитьКартинкиОбработок();
	ЗаполнитьКонтекстноеМенюНайденныеОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиПоиска(Команда)
	
	ПриИзмененииОбъектаПоиска(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВВыбранныеОбработки(Команда)
	
	СтрДоступных = Элементы.ДоступныеОбработки.ТекущиеДанные;
	Если СтрДоступных = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрДоступных.Идентификатор = СтрДоступных.ПолучитьИдентификатор();
	
	НовСтр = ВыбранныеОбработки.Добавить();
	НовСтр.ОбработкаНастройка = СтрДоступных.Обработка;
	НовСтр.СтрокаДоступнойОбработки = СтрДоступных.ПолучитьИдентификатор();
	НовСтр.Выбрать = Истина;
	НовСтр.Настройка = СтрДоступных.Настройка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьОбработку(Команда)
	
	Если НайденныеОбъекты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого ТекущаяСтрока Из ДоступныеОбработки.ПолучитьЭлементы() Цикл
		Если ТекущаяСтрока.ИмяФормы = Команда.Имя Тогда
			ОткрытьФормуОбработки(ТекущаяСтрока);
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры